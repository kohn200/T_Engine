// header.h: 표준 시스템 포함 파일
// 또는 프로젝트 특정 포함 파일이 들어 있는 포함 파일입니다.
//

#pragma once

#include "targetver.h"
#define WIN32_LEAN_AND_MEAN             // 거의 사용되지 않는 내용을 Windows 헤더에서 제외합니다.
// Windows 헤더 파일
#include <windows.h>
// C 런타임 헤더 파일입니다.
#include <stdlib.h>
#include <malloc.h>
#include <memory.h>
#include <tchar.h>
#include <iostream>
using namespace std;

// ============================= 정적 라이브러리 =============================
// 프로그램이 실행될 때 메모리에 올라가져 있는 것들. ex) #include <vector> 등등..
// ==========================================================================  

// ============================= 장점 =============================
// - 시스템 환경이 변해도 어플리케이션에 아무런 영향이 없다.
//   => 프로그램 자체에 라이브러리가 들어가 있기 때문에
// - 컴파일 시 필요한 라이브러리를 적재하기 때문에 이식성이 좋다.
// - 런타임 시 외부를 참조할 필요가 없기 때문에 속도가 빠르다.
// ================================================================

// ============================= 단점 =============================
// - 같은 코드를 가진 프로그램이 실행할 경우가 있다면 코드가 중복될 수 있으니 그만큼 메모리를 낭비한다.
// - 라이브러리가 변경되면 변경된 라이브러리만 재배포하면 되는게 아니라 다시 컴파일해서 재배포 해야한다.
// ex) 매주 목요일에 게임이 패치되는 것이 정적라이브러리
// ================================================================

// ============================= 동적 라이브러리 =============================
// 미리 프로그램에 필요한 라이브러리를 윈도우 메모리에 올려두고,
// 크아, 카트 등 프로그램을 켰을때 메모리에 올라가져 있는 라이브러리를 가져다 쓰는 것들
// => 예를 들어 윈도우가 깨져서 라이브러리가 문제가 생겼을 경우 해당 라이브러리를 참조하는 프로그램들도 박살 난다.
// ==========================================================================  

// ============================= 장점 =============================
// - 메모리 절약
// - 보다 쉽게 업그레이드 해서 배포 가능
//   => 라이브러리를 개선할 때 함수 이름만 지켜주면 프로그램이 돌아가는데 아무 문제가 없다.
// - 서로 다른 프로그램에서 동일한 함수를 호출 가능
// - 프로그램 변경시 라이브러리만 재배포하면 되니깐 유지보수가 쉽다.
//   => 사용자가 게임을 이용하는데 배포되는 게임이 있는데 이는 동적라이브러리를 사용한 것이다.
// ================================================================

// ============================= 단점 =============================
// - 외부 의존도가 높기 때문에 이식성이 낮다.
// - 공유 라이브러리를 메모리에 올려 놓고 해당 라이브러리를 찾아서 접근해야 되기 때문에 속도가 느리다.
//   
// ================================================================